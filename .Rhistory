dbWriteTable(mydb, name = "airline_operator", value= airline_operator, append = TRUE,row.names=FALSE)
aircraft <- dbGetQuery(mydb, "SELECT * FROM `aircraft`;")
airline_operator <- dbGetQuery(mydb, "SELECT * FROM `airline_operator`;")
airline_aircrafts <- sqldf("SELECT DISTINCT aircraft.AircraftTypeID, airline_operator.airlineOperatorID, df1.`Aircraft..Number.of.engines.` AS `NumberOfEngines`
FROM aircraft INNER JOIN airline_operator INNER JOIN df1
WHERE aircraft.`Make_Model` = df1.`Aircraft..Make.Model` AND
airline_operator.AirlineOperator = df1.`Aircraft..Airline.Operator`;")
dbWriteTable(mydb, name = "airline_aircrafts", value= airline_aircrafts, append = TRUE,row.names=FALSE, overwrite = FALSE)
wildlife <- sqldf('SELECT DISTINCT "Wildlife..Species" AS Species, "Wildlife..Size" AS Size
FROM df1')
#If dbWriteTable
#wildlife$WildlifeID <- 1:395
#wildlife
dbWriteTable(mydb, name = "wildlife", value= wildlife, append = TRUE,row.names=FALSE)
airport <- sqldf('SELECT DISTINCT "Airport..Name" AS NAME, "Origin.State" AS State FROM df1')
#airport
#airport$AirportID<- 1:1141
dbWriteTable(mydb, name = "airport", value= airport, append = TRUE,row.names=FALSE)
precipitation_type <- sqldf('SELECT DISTINCT "Conditions..Precipitation" AS Precipitation_Type
FROM df1
WHERE Precipitation_Type NOT LIKE "%,%"')
#precipitation_type
dbWriteTable(mydb, name = "precipitation_type", value= precipitation_type, append = TRUE,row.names=FALSE)
precipitation_type <- dbGetQuery(mydb, "SELECT * FROM `precipitation_type`;")
precipitation <- sqldf("SELECT df2.`Record.ID`, PrecipitationID
FROM df2 INNER JOIN precipitation_type
ON df2.'Conditions..Precipitation'= precipitation_type.Precipitation_Type;")
cname <- c("Record.ID", "FlightDate", "Wildlife..Number.struck", "Wildlife..Number.Struck.Actual", "Effect..Impact.to.flight", "Altitude.bin", "Effect..Indicated.Damage", "When..Phase.of.flight", "Remains.of.wildlife.collected.", "Remains.of.wildlife.sent.to.Smithsonian", "Remarks", "Conditions..Sky", "Pilot.warned.of.birds.or.wildlife.", "Cost..Total..", "Feet.above.ground", "Number.of.people.injured")
bird_strike_incident <- df1 %>% select(cname)
bird_strike_incident$FlightDate <- as.Date(bird_strike_incident$FlightDate, format = "%m/%d/%Y")
airport <- dbGetQuery(mydb, "SELECT * FROM `airport`;")
bird_strike_incident$AirportID <- 0
x<-sqldf("SELECT DISTINCT `Record.ID`, AirportID
FROM df1 INNER JOIN airport
ON df1.'Airport..Name' = airport.Name AND df1.`Origin.State` = airport.State ")
x
bird_strike_incident[bird_strike_incident$Record.ID == x$Record.ID, ]$AirportID<-x[bird_strike_incident$Record.ID == x$Record.ID,]$AirportID
wildlife <- dbGetQuery(mydb, "SELECT * FROM `wildlife`;")
bird_strike_incident$WildlifeID<- 0
x<-sqldf("SELECT DISTINCT df1.'Record.ID',wildlife.WildlifeID FROM df1 INNER JOIN wildlife ON df1.`Wildlife..Species`= wildlife.Species AND df1.`Wildlife..Size` = wildlife.Size")
bird_strike_incident[bird_strike_incident$Record.ID == x$Record.ID,]$WildlifeID <- x[bird_strike_incident$Record.ID == x$Record.ID,]$WildlifeID
aircraft <- dbGetQuery(mydb, "SELECT * FROM `aircraft`;")
airline_operator <- dbGetQuery(mydb, "SELECT * FROM `airline_operator`;")
airline_aircrafts <- dbGetQuery(mydb, "SELECT * FROM `airline_aircrafts`;")
bird_strike_incident$PlaneID<- 0
x1 <- sqldf("SELECT DISTINCT PlaneID, Make_Model, AirlineOperator, NumberOfEngines
FROM aircraft INNER JOIN airline_operator INNER JOIN airline_aircrafts
WHERE airline_aircrafts.AircraftTypeID = aircraft.AircraftTypeID AND airline_aircrafts.AirlineOperatorID = airline_operator.AirlineOperatorID")
x<-sqldf("SELECT DISTINCT df1.'Record.ID', x1.`PlaneID`
FROM df1 INNER JOIN x1
WHERE df1.`Aircraft..Make.Model` = x1.Make_Model AND df1.`Aircraft..Airline.Operator` = x1.AirlineOperator AND df1.`Aircraft..Number.of.engines.` = x1.NumberOfEngines;")
bird_strike_incident[bird_strike_incident$Record.ID == x$Record.ID,]$PlaneID <- x[bird_strike_incident$Record.ID == x$Record.ID,]$PlaneID
colnames(bird_strike_incident)
colnames(bird_strike_incident) <- c("RecordID", "FlightDate", "WildLife_NumberOfStruck", "Wildlife_NumberOfStruckActual", "Effect_ImpactToFlight", "Altitude_BinAbove1000ft", "EffectIsDamaged", "PhaseOfFlight", "WildLifeRemainsCollected", "WildLifeRemainsSent", "Remarks", "PilotWarned", "Cost_Total", "FeetAboveGround", "PeopleInjured", "ConditionsSky", "PlaneID", "WildlifeID", "AirportID")
dbWriteTable(mydb,  name = "bird_strike_incident", value= bird_strike_incident, append = TRUE, row.names=FALSE, overwrite = FALSE)
alt<-bird_strike_incident$Altitude.bin
alt[alt == "> 1000 ft"]<-1
alt
bird_strike_incident[bird_strike_incident$Altitude.bin == "> 1000 ft", ]$Altitude.bin <- 1
cname <- c("Record.ID", "FlightDate", "Wildlife..Number.struck", "Wildlife..Number.Struck.Actual", "Effect..Impact.to.flight", "Altitude.bin", "Effect..Indicated.Damage", "When..Phase.of.flight", "Remains.of.wildlife.collected.", "Remains.of.wildlife.sent.to.Smithsonian", "Remarks", "Conditions..Sky", "Pilot.warned.of.birds.or.wildlife.", "Cost..Total..", "Feet.above.ground", "Number.of.people.injured")
bird_strike_incident <- df1 %>% select(cname)
bird_strike_incident$FlightDate <- as.Date(bird_strike_incident$FlightDate, format = "%m/%d/%Y")
airport <- dbGetQuery(mydb, "SELECT * FROM `airport`;")
bird_strike_incident$AirportID <- 0
x<-sqldf("SELECT DISTINCT `Record.ID`, AirportID
FROM df1 INNER JOIN airport
ON df1.'Airport..Name' = airport.Name AND df1.`Origin.State` = airport.State ")
x
bird_strike_incident[bird_strike_incident$Record.ID == x$Record.ID, ]$AirportID<-x[bird_strike_incident$Record.ID == x$Record.ID,]$AirportID
wildlife <- dbGetQuery(mydb, "SELECT * FROM `wildlife`;")
bird_strike_incident$WildlifeID<- 0
x<-sqldf("SELECT DISTINCT df1.'Record.ID',wildlife.WildlifeID FROM df1 INNER JOIN wildlife ON df1.`Wildlife..Species`= wildlife.Species AND df1.`Wildlife..Size` = wildlife.Size")
bird_strike_incident[bird_strike_incident$Record.ID == x$Record.ID,]$WildlifeID <- x[bird_strike_incident$Record.ID == x$Record.ID,]$WildlifeID
aircraft <- dbGetQuery(mydb, "SELECT * FROM `aircraft`;")
airline_operator <- dbGetQuery(mydb, "SELECT * FROM `airline_operator`;")
airline_aircrafts <- dbGetQuery(mydb, "SELECT * FROM `airline_aircrafts`;")
bird_strike_incident$PlaneID<- 0
x1 <- sqldf("SELECT DISTINCT PlaneID, Make_Model, AirlineOperator, NumberOfEngines
FROM aircraft INNER JOIN airline_operator INNER JOIN airline_aircrafts
WHERE airline_aircrafts.AircraftTypeID = aircraft.AircraftTypeID AND airline_aircrafts.AirlineOperatorID = airline_operator.AirlineOperatorID")
x<-sqldf("SELECT DISTINCT df1.'Record.ID', x1.`PlaneID`
FROM df1 INNER JOIN x1
WHERE df1.`Aircraft..Make.Model` = x1.Make_Model AND df1.`Aircraft..Airline.Operator` = x1.AirlineOperator AND df1.`Aircraft..Number.of.engines.` = x1.NumberOfEngines;")
bird_strike_incident[bird_strike_incident$Record.ID == x$Record.ID,]$PlaneID <- x[bird_strike_incident$Record.ID == x$Record.ID,]$PlaneID
colnames(bird_strike_incident)
colnames(bird_strike_incident) <- c("RecordID", "FlightDate", "WildLife_NumberOfStruck", "Wildlife_NumberOfStruckActual", "Effect_ImpactToFlight", "Altitude_BinAbove1000ft", "EffectIsDamaged", "PhaseOfFlight", "WildLifeRemainsCollected", "WildLifeRemainsSent", "Remarks", "PilotWarned", "Cost_Total", "FeetAboveGround", "PeopleInjured", "ConditionsSky", "PlaneID", "WildlifeID", "AirportID")
dbWriteTable(mydb,  name = "bird_strike_incident", value= bird_strike_incident, append = TRUE, row.names=FALSE, overwrite = FALSE)
x<-sqldf("SELECT DISTINCT df1.'Record.ID', x1.`PlaneID`
FROM df1 INNER JOIN x1
WHERE df1.`Aircraft..Make.Model` = x1.Make_Model AND df1.`Aircraft..Airline.Operator` = x1.AirlineOperator AND df1.`Aircraft..Number.of.engines.` = x1.NumberOfEngines;")
bird_strike_incident[bird_strike_incident$Record.ID == x$Record.ID,]$PlaneID <- x[bird_strike_incident$Record.ID == x$Record.ID,]$PlaneID
colnames(bird_strike_incident)
colnames(bird_strike_incident) <- c("RecordID", "FlightDate", "WildLife_NumberOfStruck", "Wildlife_NumberOfStruckActual", "Effect_ImpactToFlight", "Altitude_BinAbove1000ft", "EffectIsDamaged", "PhaseOfFlight", "WildLifeRemainsCollected", "WildLifeRemainsSent", "Remarks", "PilotWarned", "Cost_Total", "FeetAboveGround", "PeopleInjured", "ConditionsSky", "PlaneID", "WildlifeID", "AirportID")
dbWriteTable(mydb,  name = "bird_strike_incident", value= bird_strike_incident, append = TRUE, row.names=FALSE, overwrite = FALSE)
bird_strike_incident
dbWriteTable(mydb,  name = "bird_strike_incident", value= head(bird_strike_incident), append = TRUE, row.names=FALSE, overwrite = FALSE)
query<- ("DROP TABLE IF EXISTS practicum1.`bird_strike_incident`;");
dbSendQuery(mydb, query);
query<- ("DROP TABLE IF EXISTS practicum1.`airport`;");
dbSendQuery(mydb, query);
query<- ("DROP TABLE IF EXISTS practicum1.`precipitation`;");
dbSendQuery(mydb, query);
query<- ("DROP TABLE IF EXISTS practicum1.`precipitation_type`;");
dbSendQuery(mydb, query);
query<- ("DROP TABLE IF EXISTS practicum1.`wildlife`;");
dbSendQuery(mydb, query);
query<- ("DROP TABLE IF EXISTS practicum1.`airline_aircrafts`;");
dbSendQuery(mydb, query);
query<-("DROP TABLE IF EXISTS practicum1.`airline_operator`;");
dbSendQuery(mydb, query);
query<-("DROP TABLE IF EXISTS practicum1.`aircraft`;");
dbSendQuery(mydb, query);
dbListTables(mydb);
query<-("
CREATE TABLE IF NOT EXISTS practicum1.`aircraft` (
`AircraftTypeID` INT NOT NULL AUTO_INCREMENT,
`Type` VARCHAR(45) NULL,
`Make_Model` VARCHAR(45) NULL,
`IsAircraftLarge` TINYINT NULL,
CONSTRAINT unique_constraint UNIQUE(Type,Make_Model,IsAircraftLarge),
PRIMARY KEY (`AircraftTypeID`));
");
dbSendQuery(mydb, query);
dbListTables(mydb)
query<-("
CREATE TABLE IF NOT EXISTS practicum1.`airline_operator` (
`AirlineOperatorId` INT NOT NULL AUTO_INCREMENT,
`AirlineOperator` VARCHAR(45) NULL UNIQUE,
PRIMARY KEY (`AirlineOperatorId`));");
dbSendQuery(mydb, query);
query <- ("
CREATE TABLE IF NOT EXISTS practicum1.`airline_aircrafts` (
`PlaneID` INT NOT NULL AUTO_INCREMENT,
`AircraftTypeID` INT NULL,
`AirlineOperatorID` INT NULL,
`NumberOfEngines` INT NULL,
CONSTRAINT unique_constraint UNIQUE (AircraftTypeID,AirlineOperatorID,NumberOfEngines),
PRIMARY KEY (`PlaneID`),
FOREIGN KEY (`AircraftTypeID`) REFERENCES practicum1.`aircraft` (`AircraftTypeID`),
FOREIGN KEY (`AirlineOperatorID`) REFERENCES practicum1.`airline_operator` (`AirlineOperatorId`));
");
dbSendQuery(mydb, query)
query <- ("
CREATE TABLE IF NOT EXISTS practicum1.`wildlife` (
`WildlifeID` INT NOT NULL AUTO_INCREMENT,
`Species` VARCHAR(45) NULL,
`Size` ENUM('Small', 'Medium', 'Large') NULL,
CONSTRAINT unique_constraint UNIQUE (Species, Size),
PRIMARY KEY (`WildlifeID`));");
dbSendQuery(mydb, query)
query <- ("
CREATE TABLE IF NOT EXISTS practicum1.`precipitation_type` (
`PrecipitationID` INT NOT NULL AUTO_INCREMENT,
`Precipitation_Type` VARCHAR(45) NULL UNIQUE,
PRIMARY KEY (`PrecipitationID`));");
dbSendQuery(mydb, query)
query <- ("
CREATE TABLE IF NOT EXISTS practicum1.`precipitation` (
`RecordID` INT NOT NULL,
`PrecipitationID` INT NOT NULL,
PRIMARY KEY (`RecordID`, `PrecipitationID`),
FOREIGN KEY (`PrecipitationID`) REFERENCES practicum1.`precipitation_type` (`PrecipitationID`));");
dbSendQuery(mydb, query)
query <- ("
CREATE TABLE IF NOT EXISTS practicum1.`airport` (
`AirportID` INT NOT NULL AUTO_INCREMENT,
`Name` VARCHAR(45) NULL,
`State` VARCHAR(45) NULL,
CONSTRAINT unique_constraint UNIQUE (Name,State),
PRIMARY KEY (`AirportID`));");
dbSendQuery(mydb, query)
query <- ('CREATE TABLE IF NOT EXISTS practicum1.`bird_strike_incident` (
`RecordID` INT NOT NULL,
`FlightDate` DATETIME NULL,
`WildLife_NumberOfStruck` VARCHAR(45) NULL,
`WildLife_NumberOfStruckActual` INT NULL,
`Effect_ImpactToFlight` VARCHAR(45) NULL,
`Altitude_BinAbove1000ft` TINYINT NULL,
`EffectIsDamaged` VARCHAR(45) NULL,
`PhaseOfFlight` ENUM("Approach", "Climb", "Descent", "Landing Roll", "Take-off run", "Taxi") NULL,
`WildLifeRemainsCollected` TINYINT NULL,
`WildLifeRemainsSent` VARCHAR(45) NULL,
`Remarks` LONGTEXT NULL,
`PilotWarned` TINYINT NULL,
`Cost_Total` INT NULL,
`FeetAboveGround` INT NULL,
`PeopleInjured` INT NULL,
`ConditionsSky` VARCHAR(45) NULL,
`PlaneID` INT NULL,
`WildlifeID` INT NULL,
`AirportID` INT NULL,
PRIMARY KEY (`RecordID`),
FOREIGN KEY (`PlaneID`) REFERENCES practicum1.`airline_aircrafts` (`PlaneID`),
FOREIGN KEY (`WildlifeID`) REFERENCES practicum1.`wildlife` (`WildlifeID`),
FOREIGN KEY (`AirportID`) REFERENCES practicum1.`airport` (`AirportID`));');
dbSendQuery(mydb, query)
# 1. Library (must be installed prior to loading
library(RMySQL)     ### MySQL
library(tidyr)      ### tidyr Seperating rows for handling multivalued attributes
library(sqldf)      ### SQLdf for using SQL commands on dataframes
options(sqldf.driver = "SQLite")
library(dplyr)      ### dplyr for splitting dataframes
#2. CSV File Name:
#setwd("/Users/sanyamharne/Desktop/Practicum1/")
file_csv <- 'BirdStrikesData.csv'
df1 <- read.csv(file_csv)
df2 <- separate_rows(df1, Conditions..Precipitation)
# 4. Settings
db_user <- 'root'
db_password <- 'Sanyam@123'
db_name <- 'practicum1'
# Local: localhost
db_host <- 'localhost'
db_port <- 3306 # always this port unless you change it during installation
# 4. Connect to DB
#mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
#dbname = db_name, host = db_host, port = db_port)
#To send Local Variables we write the below statement
dbSendQuery(mydb, "SET GLOBAL local_infile = true;")
#dbListTables(mydb)
aircraft <- sqldf('SELECT DISTINCT "Aircraft..Make.Model" AS Make_Model, "Aircraft..Type" AS Type, "Is.Aircraft.Large." AS IsAircraftLarge  FROM df1')
aircraft[aircraft$IsAircraftLarge == "Yes",]$IsAircraftLarge <- 1
aircraft[aircraft$IsAircraftLarge == "No",]$IsAircraftLarge <- 0
#aircraft
#aircraft$AircraftTypeID<- 1:354
aircraft$IsAircraftLarge<- as.integer(aircraft$IsAircraftLarge)
dbWriteTable(mydb, name = "aircraft", value= aircraft, append = TRUE,row.names=FALSE, overwrite = FALSE)
airline_operator <- sqldf('SELECT DISTINCT "Aircraft..Airline.Operator" AS AirlineOperator FROM df1')
#airline_operator
#airline_operator$AirlineOperatorID <- 1:293
dbWriteTable(mydb, name = "airline_operator", value= airline_operator, append = TRUE,row.names=FALSE)
aircraft <- dbGetQuery(mydb, "SELECT * FROM `aircraft`;")
airline_operator <- dbGetQuery(mydb, "SELECT * FROM `airline_operator`;")
airline_aircrafts <- sqldf("SELECT DISTINCT aircraft.AircraftTypeID, airline_operator.airlineOperatorID, df1.`Aircraft..Number.of.engines.` AS `NumberOfEngines`
FROM aircraft INNER JOIN airline_operator INNER JOIN df1
WHERE aircraft.`Make_Model` = df1.`Aircraft..Make.Model` AND
airline_operator.AirlineOperator = df1.`Aircraft..Airline.Operator`;")
dbWriteTable(mydb, name = "airline_aircrafts", value= airline_aircrafts, append = TRUE,row.names=FALSE, overwrite = FALSE)
wildlife <- sqldf('SELECT DISTINCT "Wildlife..Species" AS Species, "Wildlife..Size" AS Size
FROM df1')
#If dbWriteTable
#wildlife$WildlifeID <- 1:395
#wildlife
dbWriteTable(mydb, name = "wildlife", value= wildlife, append = TRUE,row.names=FALSE)
airport <- sqldf('SELECT DISTINCT "Airport..Name" AS NAME, "Origin.State" AS State FROM df1')
#airport
#airport$AirportID<- 1:1141
dbWriteTable(mydb, name = "airport", value= airport, append = TRUE,row.names=FALSE)
precipitation_type <- sqldf('SELECT DISTINCT "Conditions..Precipitation" AS Precipitation_Type
FROM df1
WHERE Precipitation_Type NOT LIKE "%,%"')
#precipitation_type
dbWriteTable(mydb, name = "precipitation_type", value= precipitation_type, append = TRUE,row.names=FALSE)
precipitation_type <- dbGetQuery(mydb, "SELECT * FROM `precipitation_type`;")
precipitation <- sqldf("SELECT df2.`Record.ID`, PrecipitationID
FROM df2 INNER JOIN precipitation_type
ON df2.'Conditions..Precipitation'= precipitation_type.Precipitation_Type;")
cname <- c("Record.ID", "FlightDate", "Wildlife..Number.struck", "Wildlife..Number.Struck.Actual", "Effect..Impact.to.flight", "Altitude.bin", "Effect..Indicated.Damage", "When..Phase.of.flight", "Remains.of.wildlife.collected.", "Remains.of.wildlife.sent.to.Smithsonian", "Remarks", "Conditions..Sky", "Pilot.warned.of.birds.or.wildlife.", "Cost..Total..", "Feet.above.ground", "Number.of.people.injured")
bird_strike_incident <- df1 %>% select(cname)
bird_strike_incident$FlightDate <- as.Date(bird_strike_incident$FlightDate, format = "%m/%d/%Y")
airport <- dbGetQuery(mydb, "SELECT * FROM `airport`;")
bird_strike_incident$AirportID <- 0
x<-sqldf("SELECT DISTINCT `Record.ID`, AirportID
FROM df1 INNER JOIN airport
ON df1.'Airport..Name' = airport.Name AND df1.`Origin.State` = airport.State ")
x
bird_strike_incident[bird_strike_incident$Record.ID == x$Record.ID, ]$AirportID<-x[bird_strike_incident$Record.ID == x$Record.ID,]$AirportID
wildlife <- dbGetQuery(mydb, "SELECT * FROM `wildlife`;")
bird_strike_incident$WildlifeID<- 0
x<-sqldf("SELECT DISTINCT df1.'Record.ID',wildlife.WildlifeID FROM df1 INNER JOIN wildlife ON df1.`Wildlife..Species`= wildlife.Species AND df1.`Wildlife..Size` = wildlife.Size")
bird_strike_incident[bird_strike_incident$Record.ID == x$Record.ID,]$WildlifeID <- x[bird_strike_incident$Record.ID == x$Record.ID,]$WildlifeID
aircraft <- dbGetQuery(mydb, "SELECT * FROM `aircraft`;")
airline_operator <- dbGetQuery(mydb, "SELECT * FROM `airline_operator`;")
airline_aircrafts <- dbGetQuery(mydb, "SELECT * FROM `airline_aircrafts`;")
bird_strike_incident$PlaneID<- 0
x1 <- sqldf("SELECT DISTINCT PlaneID, Make_Model, AirlineOperator, NumberOfEngines
FROM aircraft INNER JOIN airline_operator INNER JOIN airline_aircrafts
WHERE airline_aircrafts.AircraftTypeID = aircraft.AircraftTypeID AND airline_aircrafts.AirlineOperatorID = airline_operator.AirlineOperatorID")
x<-sqldf("SELECT DISTINCT df1.'Record.ID', x1.`PlaneID`
FROM df1 INNER JOIN x1
WHERE df1.`Aircraft..Make.Model` = x1.Make_Model AND df1.`Aircraft..Airline.Operator` = x1.AirlineOperator AND df1.`Aircraft..Number.of.engines.` = x1.NumberOfEngines;")
bird_strike_incident[bird_strike_incident$Record.ID == x$Record.ID,]$PlaneID <- x[bird_strike_incident$Record.ID == x$Record.ID,]$PlaneID
bird_strike_incident
colnames(bird_strike_incident)
colnames(bird_strike_incident) <- c("RecordID", "FlightDate", "WildLife_NumberOfStruck", "Wildlife_NumberOfStruckActual", "Effect_ImpactToFlight", "Altitude_BinAbove1000ft", "EffectIsDamaged", "PhaseOfFlight", "WildLifeRemainsCollected", "WildLifeRemainsSent", "Remarks", "PilotWarned", "Cost_Total", "FeetAboveGround", "PeopleInjured", "ConditionsSky", "PlaneID", "WildlifeID", "AirportID")
dbWriteTable(mydb,  name = "bird_strike_incident", value= head(bird_strike_incident), append = TRUE, row.names=FALSE, overwrite = FALSE)
print(colnames(df1))
dbDisconnect(mydb)
head(bird_strike_incident)
dbDisconnect(mydb)
#dbListTables(mydb)
dbDisconnect(mydb)
# 1. Library (must be installed prior to loading
library(RMySQL)     ### MySQL
#2. CSV File Name:
file_csv <- '/Users/sanyamharne/Desktop/Practicum1/'
# 4. Settings
db_user <- 'root'
db_password <- 'Sanyam@123'
db_name <- 'practicum1'
# Local: localhost
db_host <- 'localhost'
db_port <- 3306 # always this port unless you change it during installation
# 4. Connect to DB
mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
dbListTables(mydb)
query<- ("DROP TABLE IF EXISTS practicum1.`bird_strike_incident`;");
dbSendQuery(mydb, query);
query<- ("DROP TABLE IF EXISTS practicum1.`airport`;");
dbSendQuery(mydb, query);
query<- ("DROP TABLE IF EXISTS practicum1.`precipitation`;");
dbSendQuery(mydb, query);
query<- ("DROP TABLE IF EXISTS practicum1.`precipitation_type`;");
dbSendQuery(mydb, query);
query<- ("DROP TABLE IF EXISTS practicum1.`wildlife`;");
dbSendQuery(mydb, query);
query<- ("DROP TABLE IF EXISTS practicum1.`airline_aircrafts`;");
dbSendQuery(mydb, query);
query<-("DROP TABLE IF EXISTS practicum1.`airline_operator`;");
dbSendQuery(mydb, query);
query<-("DROP TABLE IF EXISTS practicum1.`aircraft`;");
dbSendQuery(mydb, query);
dbListTables(mydb);
query<-("
CREATE TABLE IF NOT EXISTS practicum1.`aircraft` (
`AircraftTypeID` INT NOT NULL AUTO_INCREMENT,
`Type` VARCHAR(45) NULL,
`Make_Model` VARCHAR(45) NULL,
`IsAircraftLarge` TINYINT NULL,
CONSTRAINT unique_constraint UNIQUE(Type,Make_Model,IsAircraftLarge),
PRIMARY KEY (`AircraftTypeID`));
");
dbSendQuery(mydb, query);
dbListTables(mydb)
query<-("
CREATE TABLE IF NOT EXISTS practicum1.`airline_operator` (
`AirlineOperatorId` INT NOT NULL AUTO_INCREMENT,
`AirlineOperator` VARCHAR(45) NULL UNIQUE,
PRIMARY KEY (`AirlineOperatorId`));");
dbSendQuery(mydb, query);
query <- ("
CREATE TABLE IF NOT EXISTS practicum1.`airline_aircrafts` (
`PlaneID` INT NOT NULL AUTO_INCREMENT,
`AircraftTypeID` INT NULL,
`AirlineOperatorID` INT NULL,
`NumberOfEngines` INT NULL,
CONSTRAINT unique_constraint UNIQUE (AircraftTypeID,AirlineOperatorID,NumberOfEngines),
PRIMARY KEY (`PlaneID`),
FOREIGN KEY (`AircraftTypeID`) REFERENCES practicum1.`aircraft` (`AircraftTypeID`),
FOREIGN KEY (`AirlineOperatorID`) REFERENCES practicum1.`airline_operator` (`AirlineOperatorId`));
");
dbSendQuery(mydb, query)
query <- ("
CREATE TABLE IF NOT EXISTS practicum1.`wildlife` (
`WildlifeID` INT NOT NULL AUTO_INCREMENT,
`Species` VARCHAR(45) NULL,
`Size` ENUM('Small', 'Medium', 'Large') NULL,
CONSTRAINT unique_constraint UNIQUE (Species, Size),
PRIMARY KEY (`WildlifeID`));");
dbSendQuery(mydb, query)
query <- ("
CREATE TABLE IF NOT EXISTS practicum1.`precipitation_type` (
`PrecipitationID` INT NOT NULL AUTO_INCREMENT,
`Precipitation_Type` VARCHAR(45) NULL UNIQUE,
PRIMARY KEY (`PrecipitationID`));");
dbSendQuery(mydb, query)
query <- ("
CREATE TABLE IF NOT EXISTS practicum1.`precipitation` (
`RecordID` INT NOT NULL,
`PrecipitationID` INT NOT NULL,
PRIMARY KEY (`RecordID`, `PrecipitationID`),
FOREIGN KEY (`PrecipitationID`) REFERENCES practicum1.`precipitation_type` (`PrecipitationID`));");
dbSendQuery(mydb, query)
query <- ("
CREATE TABLE IF NOT EXISTS practicum1.`airport` (
`AirportID` INT NOT NULL AUTO_INCREMENT,
`Name` VARCHAR(45) NULL,
`State` VARCHAR(45) NULL,
CONSTRAINT unique_constraint
UNIQUE (Name,State),
PRIMARY KEY (`AirportID`));");
dbSendQuery(mydb, query)
query <- ('CREATE TABLE IF NOT EXISTS practicum1.`bird_strike_incident` (
`RecordID` INT NOT NULL,
`FlightDate` DATETIME NULL,
`WildLife_NumberOfStruck` VARCHAR(45) NULL,
`WildLife_NumberOfStruckActual` INT NULL,
`Effect_ImpactToFlight` VARCHAR(45) NULL,
`Altitude_BinAbove1000ft` TINYINT NULL,
`EffectIsDamaged` VARCHAR(45) NULL,
`PhaseOfFlight` ENUM("Approach", "Climb", "Descent", "Landing Roll", "Take-off run", "Taxi") NULL,
`WildLifeRemainsCollected` TINYINT NULL,
`WildLifeRemainsSent` VARCHAR(45) NULL,
`Remarks` LONGTEXT NULL,
`PilotWarned` TINYINT NULL,
`Cost_Total` INT NULL,
`FeetAboveGround` INT NULL,
`PeopleInjured` INT NULL,
`ConditionsSky` VARCHAR(45) NULL,
`PlaneID` INT NULL,
`WildlifeID` INT NULL,
`AirportID` INT NULL,
PRIMARY KEY (`RecordID`),
FOREIGN KEY (`PlaneID`) REFERENCES practicum1.`airline_aircrafts` (`PlaneID`),
FOREIGN KEY (`WildlifeID`) REFERENCES practicum1.`wildlife` (`WildlifeID`),
FOREIGN KEY (`AirportID`) REFERENCES practicum1.`airport` (`AirportID`));');
dbSendQuery(mydb, query)
# 1. Library (must be installed prior to loading
library(RMySQL)     ### MySQL
library(tidyr)      ### tidyr Seperating rows for handling multivalued attributes
library(sqldf)      ### SQLdf for using SQL commands on dataframes
options(sqldf.driver = "SQLite")
library(dplyr)      ### dplyr for splitting dataframes
#2. CSV File Name:
setwd("/Users/sanyamharne/Desktop/Practicum1/")
#2. CSV File Name:
#setwd("/Users/sanyamharne/Desktop/Practicum1/")
file_csv <- 'BirdStrikesData.csv'
df1 <- read.csv(file_csv)
df2 <- separate_rows(df1, Conditions..Precipitation)
# 4. Settings
db_user <- 'root'
db_password <- 'Sanyam@123'
db_name <- 'practicum1'
# Local: localhost
db_host <- 'localhost'
db_port <- 3306 # always this port unless you change it during installation
# 4. Connect to DB
#mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
#dbname = db_name, host = db_host, port = db_port)
#To send Local Variables we write the below statement
dbSendQuery(mydb, "SET GLOBAL local_infile = true;")
#dbListTables(mydb)
aircraft <- sqldf('SELECT DISTINCT "Aircraft..Make.Model" AS Make_Model, "Aircraft..Type" AS Type, "Is.Aircraft.Large." AS IsAircraftLarge  FROM df1')
aircraft[aircraft$IsAircraftLarge == "Yes",]$IsAircraftLarge <- 1
aircraft[aircraft$IsAircraftLarge == "No",]$IsAircraftLarge <- 0
#aircraft
#aircraft$AircraftTypeID<- 1:354
aircraft$IsAircraftLarge<- as.integer(aircraft$IsAircraftLarge)
dbWriteTable(mydb, name = "aircraft", value= aircraft, append = TRUE,row.names=FALSE, overwrite = FALSE)
airline_operator <- sqldf('SELECT DISTINCT "Aircraft..Airline.Operator" AS AirlineOperator FROM df1')
#airline_operator
#airline_operator$AirlineOperatorID <- 1:293
dbWriteTable(mydb, name = "airline_operator", value= airline_operator, append = TRUE,row.names=FALSE)
aircraft <- sqldf('SELECT DISTINCT "Aircraft..Make.Model" AS Make_Model, "Aircraft..Type" AS Type, "Is.Aircraft.Large." AS IsAircraftLarge  FROM df1')
aircraft[aircraft$IsAircraftLarge == "Yes",]$IsAircraftLarge <- 1
aircraft[aircraft$IsAircraftLarge == "No",]$IsAircraftLarge <- 0
#aircraft
#aircraft$AircraftTypeID<- 1:354
aircraft$IsAircraftLarge<- as.integer(aircraft$IsAircraftLarge)
dbWriteTable(mydb, name = "aircraft", value= aircraft, append = TRUE,row.names=FALSE, overwrite = FALSE)
airline_operator <- sqldf('SELECT DISTINCT "Aircraft..Airline.Operator" AS AirlineOperator FROM df1')
#airline_operator
#airline_operator$AirlineOperatorID <- 1:293
dbWriteTable(mydb, name = "airline_operator", value= airline_operator, append = TRUE,row.names=FALSE)
aircraft <- dbGetQuery(mydb, "SELECT * FROM `aircraft`;")
airline_operator <- dbGetQuery(mydb, "SELECT * FROM `airline_operator`;")
airline_aircrafts <- sqldf("SELECT DISTINCT aircraft.AircraftTypeID, airline_operator.airlineOperatorID, df1.`Aircraft..Number.of.engines.` AS `NumberOfEngines`
FROM aircraft INNER JOIN airline_operator INNER JOIN df1
WHERE aircraft.`Make_Model` = df1.`Aircraft..Make.Model` AND
airline_operator.AirlineOperator = df1.`Aircraft..Airline.Operator`;")
dbWriteTable(mydb, name = "airline_aircrafts", value= airline_aircrafts, append = TRUE,row.names=FALSE, overwrite = FALSE)
wildlife <- sqldf('SELECT DISTINCT "Wildlife..Species" AS Species, "Wildlife..Size" AS Size
FROM df1')
#If dbWriteTable
#wildlife$WildlifeID <- 1:395
#wildlife
dbWriteTable(mydb, name = "wildlife", value= wildlife, append = TRUE,row.names=FALSE)
airport <- sqldf('SELECT DISTINCT "Airport..Name" AS NAME, "Origin.State" AS State FROM df1')
#airport
#airport$AirportID<- 1:1141
dbWriteTable(mydb, name = "airport", value= airport, append = TRUE,row.names=FALSE)
precipitation_type <- sqldf('SELECT DISTINCT "Conditions..Precipitation" AS Precipitation_Type
FROM df1
WHERE Precipitation_Type NOT LIKE "%,%"')
#precipitation_type
dbWriteTable(mydb, name = "precipitation_type", value= precipitation_type, append = TRUE,row.names=FALSE)
precipitation_type <- dbGetQuery(mydb, "SELECT * FROM `precipitation_type`;")
precipitation <- sqldf("SELECT df2.`Record.ID`, PrecipitationID
FROM df2 INNER JOIN precipitation_type
ON df2.'Conditions..Precipitation'= precipitation_type.Precipitation_Type;")
cname <- c("Record.ID", "FlightDate", "Wildlife..Number.struck", "Wildlife..Number.Struck.Actual", "Effect..Impact.to.flight", "Altitude.bin", "Effect..Indicated.Damage", "When..Phase.of.flight", "Remains.of.wildlife.collected.", "Remains.of.wildlife.sent.to.Smithsonian", "Remarks", "Conditions..Sky", "Pilot.warned.of.birds.or.wildlife.", "Cost..Total..", "Feet.above.ground", "Number.of.people.injured")
bird_strike_incident <- df1 %>% select(cname)
bird_strike_incident$FlightDate <- as.Date(bird_strike_incident$FlightDate, format = "%m/%d/%Y")
airport <- dbGetQuery(mydb, "SELECT * FROM `airport`;")
bird_strike_incident$AirportID <- 0
x<-sqldf("SELECT DISTINCT `Record.ID`, AirportID
FROM df1 INNER JOIN airport
ON df1.'Airport..Name' = airport.Name AND df1.`Origin.State` = airport.State ")
x
bird_strike_incident[bird_strike_incident$Record.ID == x$Record.ID, ]$AirportID<-x[bird_strike_incident$Record.ID == x$Record.ID,]$AirportID
wildlife <- dbGetQuery(mydb, "SELECT * FROM `wildlife`;")
bird_strike_incident$WildlifeID<- 0
x<-sqldf("SELECT DISTINCT df1.'Record.ID',wildlife.WildlifeID FROM df1 INNER JOIN wildlife ON df1.`Wildlife..Species`= wildlife.Species AND df1.`Wildlife..Size` = wildlife.Size")
bird_strike_incident[bird_strike_incident$Record.ID == x$Record.ID,]$WildlifeID <- x[bird_strike_incident$Record.ID == x$Record.ID,]$WildlifeID
aircraft <- dbGetQuery(mydb, "SELECT * FROM `aircraft`;")
airline_operator <- dbGetQuery(mydb, "SELECT * FROM `airline_operator`;")
airline_aircrafts <- dbGetQuery(mydb, "SELECT * FROM `airline_aircrafts`;")
bird_strike_incident$PlaneID<- 0
x1 <- sqldf("SELECT DISTINCT PlaneID, Make_Model, AirlineOperator, NumberOfEngines
FROM aircraft INNER JOIN airline_operator INNER JOIN airline_aircrafts
WHERE airline_aircrafts.AircraftTypeID = aircraft.AircraftTypeID AND airline_aircrafts.AirlineOperatorID = airline_operator.AirlineOperatorID")
x<-sqldf("SELECT DISTINCT df1.'Record.ID', x1.`PlaneID`
FROM df1 INNER JOIN x1
WHERE df1.`Aircraft..Make.Model` = x1.Make_Model AND df1.`Aircraft..Airline.Operator` = x1.AirlineOperator AND df1.`Aircraft..Number.of.engines.` = x1.NumberOfEngines;")
bird_strike_incident[bird_strike_incident$Record.ID == x$Record.ID,]$PlaneID <- x[bird_strike_incident$Record.ID == x$Record.ID,]$PlaneID
bird_strike_incident
colnames(bird_strike_incident)
colnames(bird_strike_incident) <- c("RecordID", "FlightDate", "WildLife_NumberOfStruck", "Wildlife_NumberOfStruckActual", "Effect_ImpactToFlight", "Altitude_BinAbove1000ft", "EffectIsDamaged", "PhaseOfFlight", "WildLifeRemainsCollected", "WildLifeRemainsSent", "Remarks", "PilotWarned", "Cost_Total", "FeetAboveGround", "PeopleInjured", "ConditionsSky", "PlaneID", "WildlifeID", "AirportID")
dbWriteTable(mydb,  name = "bird_strike_incident", value= bird_strike_incident, append = TRUE, row.names=FALSE, overwrite = FALSE)
head(bird_strike_incident)
